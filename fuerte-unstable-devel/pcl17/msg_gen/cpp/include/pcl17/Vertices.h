/* Auto-generated by genmsg_cpp for file /home/micsu/fuerte_workspace/fsr2013/fuerte-unstable-devel/pcl17/msg/Vertices.msg */
#ifndef PCL17_MESSAGE_VERTICES_H
#define PCL17_MESSAGE_VERTICES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pcl17
{
template <class ContainerAllocator>
struct Vertices_ {
  typedef Vertices_<ContainerAllocator> Type;

  Vertices_()
  : vertices()
  {
  }

  Vertices_(const ContainerAllocator& _alloc)
  : vertices(_alloc)
  {
  }

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _vertices_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  vertices;


  typedef boost::shared_ptr< ::pcl17::Vertices_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pcl17::Vertices_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Vertices
typedef  ::pcl17::Vertices_<std::allocator<void> > Vertices;

typedef boost::shared_ptr< ::pcl17::Vertices> VerticesPtr;
typedef boost::shared_ptr< ::pcl17::Vertices const> VerticesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pcl17::Vertices_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pcl17::Vertices_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pcl17

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pcl17::Vertices_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pcl17::Vertices_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pcl17::Vertices_<ContainerAllocator> > {
  static const char* value() 
  {
    return "39bd7b1c23763ddd1b882b97cb7cfe11";
  }

  static const char* value(const  ::pcl17::Vertices_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x39bd7b1c23763dddULL;
  static const uint64_t static_value2 = 0x1b882b97cb7cfe11ULL;
};

template<class ContainerAllocator>
struct DataType< ::pcl17::Vertices_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pcl17/Vertices";
  }

  static const char* value(const  ::pcl17::Vertices_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pcl17::Vertices_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# List of point indices\n\
uint32[] vertices\n\
\n\
";
  }

  static const char* value(const  ::pcl17::Vertices_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pcl17::Vertices_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.vertices);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Vertices_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pcl17::Vertices_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pcl17::Vertices_<ContainerAllocator> & v) 
  {
    s << indent << "vertices[]" << std::endl;
    for (size_t i = 0; i < v.vertices.size(); ++i)
    {
      s << indent << "  vertices[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.vertices[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PCL17_MESSAGE_VERTICES_H

